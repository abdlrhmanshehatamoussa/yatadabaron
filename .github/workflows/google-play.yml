name: googleplay-fastlane

on:
  push:
    tags:
      - "test@*.*.*"
      - "production@*.*.*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      create_env_file: false
      create_google_services_file: true
      version_code_start: 70
      package_type: appbundle

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extracting Version Code
        run: |
          versionCode=${{ github.run_number }}
          versionCodeStart=${{env.version_code_start}}
          versionCode=$(($versionCode+$versionCodeStart))
          echo "versionCode=$versionCode" >> $GITHUB_ENV

      - name: Extracting Build environment and Version Name
        run: |
          tag_name=${GITHUB_REF##*/}
          tag_name_splitted=(${tag_name//@/ })
          environment=${tag_name_splitted[0]}
          versionName=${tag_name_splitted[1]}
          echo "versionName=$versionName" >> $GITHUB_ENV
          echo "environment=$environment" >> $GITHUB_ENV

      - name: Fastlane lane (Alpha)
        run: |
          echo "lane=alpha_${{env.package_type}}" >> $GITHUB_ENV
        if: ${{env.environment == 'test'}}

      - name: Fastlane lane (production)
        run: |
          echo "lane=production_${{env.package_type}}" >> $GITHUB_ENV
        if: ${{env.environment == 'production'}}

      - name: Creating Keystore file
        run: |
          cd android  
          cd app
          keyFile=key.jks
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $keyFile.asc > $keyFile

          cd ../
          keyPropFile=key.properties
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $keyPropFile.asc > $keyPropFile

      - name: Creating Version file
        run: |
          pwd
          cd android
          verPropFile=version.properties
          touch $verPropFile
          echo flutter.versionName=${{env.versionName}}>$verPropFile
          echo flutter.versionCode=${{env.versionCode}}>>$verPropFile

      - name: Creating Google Services file
        run: |
          pwd
          cd android
          cd app
          file=google-services.json
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.asc > $file
        if: ${{env.create_google_services_file == 'true'}}

      - name: Creating Fastlane Secret file
        run: |
          pwd
          cd android
          file=fastlane-secret.json
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.asc > $file

      - name: Creating .env file
        run: |
          pwd
          cd assets
          file=.env
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.${{env.environment}}.asc > $file
        if: ${{env.create_env_file == 'true'}}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Install Fastlane dependencies
        run: |
          pwd
          cd android
          bundle install

      - name: Testing Fastlane installation
        run: |
          pwd
          cd android
          bundle update fastlane
          bundle exec fastlane run validate_play_store_json_key

      - name: "Setup Java"
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "11"

      - name: "Setup Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Build Android App Package
        run: |
          pwd
          cd android
          flutter clean
          flutter build ${{env.package_type}} --release

      - name: Deploy Google Play
        run: |
          pwd
          cd android
          bundle exec fastlane ${{env.lane}}
      
      - name: Append tag to the source control
        run: |
          tagName=release-${{env.versionName}}-${{env.versionCode}}-${{env.lane}}
          git tag $tagName
          git push origin $tagName
