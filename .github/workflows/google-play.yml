name: deploy-flutter-googleplay-fastlane

on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      create_env_file: false
      create_google_services_file: true
      version_code_start: 70
      package_type: appbundle
      branch: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Injecting Environment Variables (Alpha)
        id: env-alpha
        run: |
          echo "lane=alpha_${{env.package_type}}" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/dev'

      - name: Injecting Environment Variables (Production)
        id: env-production
        run: |
          echo "lane=production_${{env.package_type}}" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/main'

      - name: Extracting Version Code
        run: |
          versionCode=${{ github.run_number }}
          versionCodeStart=${{env.version_code_start}}
          versionCode=$(($versionCode+$versionCodeStart))
          echo "versionCode=$versionCode" >> $GITHUB_ENV

      - name: Preparing Version Info
        run: |
          tagName=$(git describe --tags --abbrev=0)
          tagNameSplitted=(${tagName//-/ })
          prevVersionName=${tagNameSplitted[3]}
          prevVersionNameSplitted=(${prevVersionName//./ })
          lastCommitName=$(git show -s --format=%s)
          lastCommitNameSplitted=(${lastCommitName//:/ })
          prefix=${lastCommitNameSplitted[0]}
          major=${prevVersionNameSplitted[0]}
          minor=${prevVersionNameSplitted[1]}
          fix=${prevVersionNameSplitted[2]}
          echo "ver_prefix=$prefix" >> $GITHUB_ENV
          echo "ver_major=$major" >> $GITHUB_ENV
          echo "ver_minor=$minor" >> $GITHUB_ENV
          echo "ver_fix=$fix" >> $GITHUB_ENV

      - name: Extracting Version (Major)
        run: |
          major=$(echo "${{env.ver_major}} + 1" | bc)
          versionName=$major.0.0
          echo "versionName=$versionName" >> $GITHUB_ENV
        if: ${{env.ver_prefix == 'major'}}

      - name: Extracting Version (Minor)
        run: |
          minor=$(echo "${{env.ver_minor}} + 1" | bc)
          versionName=${{env.ver_major}}.$minor.0
          echo "versionName=$versionName" >> $GITHUB_ENV
        if: ${{env.ver_prefix == 'minor'}}

      - name: Extracting Version (Fix)
        run: |
          fix=$(echo "${{env.ver_fix}} + 1" | bc)
          versionName=${{env.ver_major}}.${{env.ver_minor}}.$fix
          echo "versionName=$versionName" >> $GITHUB_ENV
        if: ${{env.ver_prefix == 'fix'}}

      - name: Extracting Version (Merge)
        run: |
          versionName=${{env.ver_major}}.${{env.ver_minor}}.${{env.ver_fix}}
          echo "versionName=$versionName" >> $GITHUB_ENV
        if: ${{ (env.ver_prefix != 'major') && (env.ver_prefix != 'minor') && (env.ver_prefix != 'fix') }}

      - name: Extracting New Tag Name
        run: |
          newTagName=googleplay-${{env.lane}}-$versionCode-$versionName
          echo "newTagName=$newTagName" >> $GITHUB_ENV

      - name: Printing Version Info
        run: |
          echo version_name=${{env.versionName}}, version_code=${{env.versionCode}}, newTagName=${{env.newTagName}}

      - name: Creating Keystore file
        run: |
          cd android  
          cd app
          keyFile=key.jks
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $keyFile.asc > $keyFile

          cd ../
          keyPropFile=key.properties
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $keyPropFile.asc > $keyPropFile

      - name: Creating Version file
        run: |
          pwd
          cd android
          verPropFile=version.properties
          touch $verPropFile
          echo flutter.versionName=${{env.versionName}}>$verPropFile
          echo flutter.versionCode=${{env.versionCode}}>>$verPropFile

      - name: Creating Google Services file
        run: |
          pwd
          cd android
          cd app
          file=google-services.json
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.asc > $file
        if: ${{env.create_google_services_file == 'true'}}

      - name: Creating Fastlane Secret file
        run: |
          pwd
          cd android
          file=fastlane-secret.json
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.asc > $file

      - name: Creating .env file
        run: |
          pwd
          cd assets
          file=.env
          gpg -d --passphrase "${{ secrets.GPG_PASS }}" --batch $file.${{env.branch}}.asc > $file
        if: ${{env.create_env_file == 'true'}}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Install Fastlane dependencies
        run: |
          pwd
          cd android
          bundle install

      - name: Testing Fastlane installation
        run: |
          pwd
          cd android
          bundle update fastlane
          bundle exec fastlane run validate_play_store_json_key

      - name: "Setup Java"
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "11"

      - name: "Setup Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Build Android App Package
        run: |
          pwd
          cd android
          flutter clean
          flutter build ${{env.package_type}} --release

      - name: Deploy Google Play
        run: |
          pwd
          cd android
          lane=${{env.lane}}
          bundle exec fastlane $lane

      - name: Append tag to the source control
        run: |
          git tag ${{env.newTagName}}
          git push origin ${{env.newTagName}}
